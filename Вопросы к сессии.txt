**1.Особенности операционных систем мобильных устройств
Операционные системы мобильных устройств (например, Android и iOS) обладают следующими особенностями:

	1. **Ориентация на сенсорный интерфейс** – управление осуществляется касаниями экрана.
	2. **Энергоэффективность** – оптимизированы для низкого энергопотребления.
	3. **Многозадачность** – поддерживают одновременное выполнение нескольких приложений.
	4. **Управление ресурсами** – ограничены по памяти и процессорной мощности, что требует оптимизации.
	5. **Безопасность** – реализованы механизмы песочницы для изоляции приложений.
	6. **Интеграция с датчиками** – используют встроенные сенсоры (GPS, акселерометр, камера).

	Каждая ОС также имеет собственный магазин приложений и систему обновлений.


**2. История версий ОС Android.

	1. **Android 1.0 (2008)** – Первая версия, с базовым набором функций: браузер, контакты, Gmail.
	2. **Android 1.5 Cupcake (2009)** – Добавлена поддержка виджетов, запись видео.
	3. **Android 2.0-2.1 Eclair (2009)** – Введена навигация Google Maps и поддержка многозадачности.
	4. **Android 2.2 Froyo (2010)** – Повышение скорости работы, поддержка Adobe Flash.
	5. **Android 2.3 Gingerbread (2010)** – Оптимизация для игр и улучшение интерфейса.
	6. **Android 3.0 Honeycomb (2011)** – Версия для планшетов с обновлённым интерфейсом.
	7. **Android 4.0 Ice Cream Sandwich (2011)** – Унификация интерфейса для телефонов и планшетов.
	8. **Android 4.1-4.3 Jelly Bean (2012)** – Улучшена производительность, добавлен Google Now.
	9. **Android 4.4 KitKat (2013)** – Оптимизация для слабых устройств, интеграция Google Now на главном экране.
	10. **Android 5.0 Lollipop (2014)** – Переход на Material Design, поддержка 64-разрядных процессоров.
	11. **Android 6.0 Marshmallow (2015)** – Введены разрешения для приложений и оптимизация батареи.
	12. **Android 7.0 Nougat (2016)** – Многозадачность, режим разделённого экрана.
	13. **Android 8.0 Oreo (2017)** – Фоновые ограничения для приложений, автозаполнение.
	14. **Android 9.0 Pie (2018)** – Жестовое управление, цифровое благополучие.
	15. **Android 10 (2019)** – Тёмная тема, улучшение конфиденциальности.
	16. **Android 11 (2020)** – Управление разрешениями, поддержка 5G.
	17. **Android 12 (2021)** – Дизайн Material You, более глубокие настройки конфиденциальности.
	18. **Android 13 (2022)** – Улучшенная персонализация, контроль уведомлений и расширенная поддержка устройств.

	Android регулярно обновляется, улучшая производительность, безопасность и функции.

Вот краткие и понятные ответы на перечисленные вопросы:

**3. Архитектура ОС Android**  
Состоит из:
- **Ядро Linux** – управление ресурсами, безопасность, драйверы.
- **Библиотеки** – SQLite, OpenGL, SSL, WebKit и др.
- **Виртуальная машина ART/Dalvik** – выполнение байт-кода приложений.
- **Фреймворк** – библиотеки для разработки приложений (Activity, Content Providers).
- **Приложения** – пользовательские программы.

**4. История развития iOS**  
- **2007** – iPhone OS 1: запущена вместе с первым iPhone.
- **2010** – Переименована в iOS с выходом iPad.
- **2011-2023** – Постоянные обновления с добавлением Siri, FaceTime, жестов, Split View и др.

**5. Архитектура ОС iOS**  
Состоит из четырех уровней:
- **Core OS** – управление ресурсами и драйверами.
- **Core Services** – базовые службы (Foundation, Core Data).
- **Media** – обработка мультимедиа (Core Graphics, AVFoundation).
- **Cocoa Touch** – интерфейс пользователя, UIKit.

**6. Тренды рынка мобильных приложений**  
- **Искусственный интеллект и машинное обучение**
- **AR/VR-технологии**
- **5G-сети**
- **Мобильные платежи**
- **Приложения для здоровья и фитнеса**

**7. Процесс загрузки ОС Android**  
- **Bootloader** загружает ядро.
- **Ядро Linux** инициализирует драйверы и запускает процессы.
- **Zygote** создает процессы для приложений.
- **System Server** загружает системные сервисы (Activity Manager, Window Manager и др.).

**8. Механизмы безопасности в ОС Android**  
- **Песочница приложений**
- **Модель разрешений**
- **Шифрование данных**
- **Проверка целостности APK (Signature Check)**

**9. Основы разработки ПО. Жизненный цикл ПО**  
- Этапы: **планирование**, **разработка**, **тестирование**, **внедрение**, **поддержка**.
- Модели: водопадная, Agile, инкрементная и др.

**10. Способы прототипирования приложений**  
- **Wireframe** – простая структура интерфейса.
- **Mockup** – статические визуальные макеты.
- **Clickable prototype** – интерактивный прототип.

**11. Material Design. Основные принципы**  
- **Единое пространство и движение** – объекты изменяются плавно.
- **Слои и тени** – глубина и иерархия интерфейса.
- **Цвет и типографика** – четкий и интуитивный дизайн.

**12. Структура пакета**  
APK включает:
- **dex-файлы** – байт-код.
- **res-файлы** – ресурсы (изображения, строки).
- **AndroidManifest.xml** – описание приложения.

**13. Виды приложений**  
- **Нативные** – для конкретной ОС (Android, iOS).
- **Кроссплатформенные** – разработаны с использованием фреймворков (Flutter, React Native).
- **Веб-приложения** – работают в браузере.

**14. Компоненты системы**  
- **Activity** – экран приложения.
- **Service** – фоновая работа.
- **BroadcastReceiver** – получение системных событий.
- **ContentProvider** – доступ к данным между приложениями.

**15. Жизненный цикл Activity**  
Основные состояния:
- **onCreate()** – создание Activity.
- **onStart()** – подготовка к отображению.
- **onResume()** – Activity на переднем плане.
- **onPause()** – Activity частично скрыта.
- **onStop()** – Activity полностью скрыта.
- **onDestroy()** – Activity уничтожается.

**16. Жизненный цикл Fragment**  
Основные стадии:
- **onAttach()** – привязка к Activity.
- **onCreateView()** – создание интерфейса.
- **onStart()** – фрагмент видим.
- **onDestroyView()** – удаление интерфейса.

**17. Способы связывания файлов разметки и программной реализации**  
- **findViewById()** – поиск элементов через ID.
- **View Binding** – связывание разметки с помощью сгенерированного класса.
- **Data Binding** – двухстороннее связывание данных и интерфейса.

**18. Обработка сенсорного управления**  
Используются:
- **onTouchEvent()** – обработка касаний.
- **GestureDetector** – распознавание жестов (прокрутка, масштабирование).

**19. Типы датчикового оборудования**  
- **Акселерометр** – измерение ускорения.
- **Гироскоп** – измерение угловых скоростей.
- **GPS** – геопозиция.
- **Магнитометр** – определение направления (компас).

**20. Взаимодействие с системами позиционирования**  
- **GPS** – точное местоположение.
- **Wi-Fi и сотовые сети** – определение местоположения через сети.
- **Fused Location Provider** – объединение источников для точности.

**21. Многопоточность**  
Одновременное выполнение нескольких задач в одном приложении.

**22. Основы построения многопоточных приложений**  
Используются:
- **Thread** – для создания новых потоков.
- **AsyncTask** – выполнение задач в фоновом режиме.
- **ExecutorService** – управление потоками.

**23. Жизненный цикл процессов**  
Android управляет процессами с приоритетами:
- **Фоновый процесс** – низкий приоритет, может быть завершен системой.
- **Процесс видимого приложения** – приоритет выше, но не активен.
- **Процесс переднего плана** – максимальный приоритет.

**24. Потоки в Android**  
- **Main (UI) thread** – главный поток для интерфейса.
- **Worker threads** – для выполнения фоновых задач.

**25. Типы хранилищ в Android**  
- **Shared Preferences** – для небольших данных.
- **SQLite** – для локальных баз данных.
- **Файловая система** – хранение файлов.
- **Room** – ORM для работы с SQLite.

**26. Shared Preferences. Назначение, характеристики**  
Хранение простых данных (строки, числа) в виде ключ-значение, используется для настроек.

**27. SQLite. Назначение, характеристики. Принципы работы**  
Локальная база данных SQL для хранения структурированных данных.

**28. Android architecture components**  
Библиотеки для упрощения разработки:
- **ViewModel, LiveData, Room, Paging и др.**

**29. Lifecycle. Назначение, характеристики**  
Компонент для управления жизненным циклом Activity и Fragment, предотвращает утечки памяти.

**30. Live Data. Назначение, характеристики**  
Хранение данных, которые могут наблюдаться, и обновление интерфейса при изменениях.

**31. ViewModel. Назначение, характеристики**  
Хранит данные, переживает изменения конфигурации, отделяет бизнес-логику от интерфейса.

**32. Room. Назначение, характеристики**  
Абстракция над SQLite, упрощает работу с базами данных через DAO и сущности.

**33. Firebase. Назначение, характеристики**  
Платформа Google для разработки: аутентификация, облачные базы данных, аналитика.

**34. Рефакторинг**  
Процесс улучшения кода без изменения его поведения.

**35. Проблемы кода**  
- **Дублирование кода**
- **Сложные зависимости**
- **Плохая читаемость**

**36. Паттерны проектирования**  
- **Singleton** – один экземпляр объекта.
- **Factory** – создание объектов без указания точного класса.
- **Observer** – уведомление подписчиков об изменениях.

**37. Архитектура приложений. SOLID**  
Принципы проектирования:
- **S** – Принцип единственной ответственности.
- **O** – Принцип открытости/закрытости.
- **L** – Принцип подстановки Лисков.
- **I** – Принцип разделения интерфейсов.
- **D** – Принцип инверсии зависимостей.

**38. Принцип единственной ответственности**  
Каждый класс должен иметь только одну причину для изменения.

**39. Принцип открытости/закрытости**  
Классы должны быть открыты для расширения, но закрыты для изменения.

**40. Принцип подстановки Барбары Лисков**  
Объекты подкласса могут заменять объекты суперкласса без изменения поведения.

**41. Принцип разделения интерфейсов**  
Интерфейсы должны быть специфичны и

 не нагружены лишними методами.

**42. Принцип инверсии зависимости**  
Модули должны зависеть от абстракций, а не от конкретных реализаций.

**43. Чистая архитектура**  
Многоуровневая архитектура с четким разделением на бизнес-логику и внешние системы.

**44. Характеристика MVC**  
- **Model-View-Controller** – разделение данных, интерфейса и логики управления.

**45. Характеристика MVP**  
- **Model-View-Presenter** – улучшенная версия MVC с более четкой организацией логики.

**46. Характеристика MVVM**  
- **Model-View-ViewModel** – отделение логики отображения от бизнес-логики, используется LiveData.
